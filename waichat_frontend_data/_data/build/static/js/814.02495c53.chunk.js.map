{"version":3,"file":"static/js/814.02495c53.chunk.js","mappings":"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","sources":["components/admin/AdminPanel.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport api from \"../../services/api\";\nimport { toast } from \"react-toastify\";\n\n// Styled components\nconst AdminContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  background-color: var(--background-color);\n  color: var(--text-color);\n`;\n\nconst Header = styled.header`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem 2rem;\n  background-color: var(--primary-color);\n  color: white;\n`;\n\nconst MainContent = styled.main`\n  display: flex;\n  flex: 1;\n  overflow: hidden;\n`;\n\nconst Sidebar = styled.aside`\n  width: 250px;\n  background-color: var(--sidebar-bg);\n  padding: 1rem 0;\n  overflow-y: auto;\n`;\n\nconst SidebarItem = styled.div`\n  padding: 0.8rem 1.5rem;\n  cursor: pointer;\n  transition: background-color 0.2s;\n  \n  &:hover {\n    background-color: var(--hover-color);\n  }\n  \n  &.active {\n    background-color: var(--active-color);\n    font-weight: bold;\n  }\n`;\n\nconst ContentArea = styled.div`\n  flex: 1;\n  padding: 2rem;\n  overflow-y: auto;\n`;\n\nconst Title = styled.h2`\n  margin-bottom: 1.5rem;\n  color: var(--primary-color);\n  border-bottom: 1px solid var(--border-color);\n  padding-bottom: 0.5rem;\n`;\n\nconst Table = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n  margin-bottom: 2rem;\n  \n  th, td {\n    padding: 0.75rem;\n    text-align: left;\n    border-bottom: 1px solid var(--border-color);\n  }\n  \n  th {\n    background-color: var(--table-header-bg);\n    font-weight: bold;\n  }\n  \n  tr:hover {\n    background-color: var(--hover-color);\n  }\n`;\n\nconst Button = styled.button`\n  padding: 0.5rem 1rem;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-weight: 500;\n  transition: background-color 0.2s;\n  margin-right: 0.5rem;\n  \n  &.primary {\n    background-color: var(--primary-color);\n    color: white;\n    \n    &:hover {\n      background-color: var(--primary-dark);\n    }\n  }\n  \n  &.secondary {\n    background-color: var(--secondary-color);\n    color: white;\n    \n    &:hover {\n      background-color: var(--secondary-dark);\n    }\n  }\n  \n  &.danger {\n    background-color: var(--danger-color);\n    color: white;\n    \n    &:hover {\n      background-color: var(--danger-dark);\n    }\n  }\n`;\n\nconst Form = styled.form`\n  max-width: 600px;\n  margin-bottom: 2rem;\n`;\n\nconst FormGroup = styled.div`\n  margin-bottom: 1rem;\n`;\n\nconst Label = styled.label`\n  display: block;\n  margin-bottom: 0.5rem;\n  font-weight: 500;\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  padding: 0.75rem;\n  border: 1px solid var(--border-color);\n  border-radius: 4px;\n  background-color: var(--input-bg);\n  color: var(--text-color);\n  \n  &:focus {\n    border-color: var(--primary-color);\n    outline: none;\n  }\n`;\n\nconst Select = styled.select`\n  width: 100%;\n  padding: 0.75rem;\n  border: 1px solid var(--border-color);\n  border-radius: 4px;\n  background-color: var(--input-bg);\n  color: var(--text-color);\n  \n  &:focus {\n    border-color: var(--primary-color);\n    outline: none;\n  }\n`;\n\nconst Textarea = styled.textarea`\n  width: 100%;\n  padding: 0.75rem;\n  border: 1px solid var(--border-color);\n  border-radius: 4px;\n  background-color: var(--input-bg);\n  color: var(--text-color);\n  min-height: 150px;\n  \n  &:focus {\n    border-color: var(--primary-color);\n    outline: none;\n  }\n`;\n\nconst Modal = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n`;\n\nconst ModalContent = styled.div`\n  background-color: var(--background-color);\n  padding: 2rem;\n  border-radius: 8px;\n  width: 500px;\n  max-width: 90%;\n`;\n\nconst ModalHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1.5rem;\n  \n  h3 {\n    margin: 0;\n  }\n`;\n\nconst CloseButton = styled.button`\n  background: none;\n  border: none;\n  font-size: 1.5rem;\n  cursor: pointer;\n  color: var(--text-color);\n`;\n\n// Componente principale\nconst AdminPanel = () => {\n  const [activeSection, setActiveSection] = useState(\"users\");\n  const [users, setUsers] = useState([]);\n  const [models, setModels] = useState([]);\n  const [prompts, setPrompts] = useState([]);\n  const [groups, setGroups] = useState([]);\n  const [modal, setModal] = useState({ isOpen: false, type: null, data: null });\n  const [sslCertificate, setSslCertificate] = useState({ cert: \"\", key: \"\" });\n  const [formData, setFormData] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Carica i dati iniziali\n  useEffect(() => {\n    fetchData();\n  }, [activeSection]);\n\n  const fetchData = async () => {\n    setIsLoading(true);\n    try {\n      switch (activeSection) {\n        case \"users\":\n          const userResponse = await api.get(\"/admin/users\");\n          setUsers(userResponse.data);\n          break;\n        case \"models\":\n          const modelsResponse = await api.get(\"/admin/ollama/models\");\n          setModels(modelsResponse.data);\n          break;\n        case \"prompts\":\n          const promptsResponse = await api.get(\"/admin/ollama/prompts\");\n          setPrompts(promptsResponse.data);\n          break;\n        case \"groups\":\n          const groupsResponse = await api.get(\"/admin/groups\");\n          setGroups(groupsResponse.data);\n          break;\n        case \"ssl\":\n          const sslResponse = await api.get(\"/admin/ssl\");\n          setSslCertificate(sslResponse.data);\n          break;\n        default:\n          break;\n      }\n    } catch (error) {\n      toast.error(`Errore nel caricamento dei dati: ${error.response?.data?.message || error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({ ...formData, [name]: value });\n  };\n\n  // GESTIONE UTENTI\n  const handleOpenUserModal = (type, user = null) => {\n    setFormData(user || { username: \"\", email: \"\", password: \"\", fullName: \"\", role: \"user\" });\n    setModal({ isOpen: true, type, data: user });\n  };\n\n  const handleUserSubmit = async (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n    \n    try {\n      if (modal.type === \"addUser\") {\n        await api.post(\"/admin/users\", formData);\n        toast.success(\"Utente creato con successo\");\n      } else if (modal.type === \"editUser\") {\n        await api.put(`/admin/users/${modal.data.id}`, formData);\n        toast.success(\"Utente aggiornato con successo\");\n      } else if (modal.type === \"changePassword\") {\n        await api.put(`/admin/users/${modal.data.id}/password`, { password: formData.newPassword });\n        toast.success(\"Password aggiornata con successo\");\n      }\n      \n      setModal({ isOpen: false, type: null, data: null });\n      fetchData();\n    } catch (error) {\n      toast.error(`Errore: ${error.response?.data?.message || error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleDeleteUser = async (userId) => {\n    if (window.confirm(\"Sei sicuro di voler eliminare questo utente?\")) {\n      setIsLoading(true);\n      try {\n        await api.delete(`/admin/users/${userId}`);\n        toast.success(\"Utente eliminato con successo\");\n        fetchData();\n      } catch (error) {\n        toast.error(`Errore: ${error.response?.data?.message || error.message}`);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  // GESTIONE MODELLI OLLAMA\n  const handleOpenModelModal = (type, model = null) => {\n    setFormData(model || { name: \"\", url: \"\" });\n    setModal({ isOpen: true, type, data: model });\n  };\n\n  const handleModelSubmit = async (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n    \n    try {\n      if (modal.type === \"addModel\") {\n        await api.post(\"/admin/ollama/models\", formData);\n        toast.success(\"Modello aggiunto con successo\");\n      } else if (modal.type === \"editModel\") {\n        await api.put(`/admin/ollama/models/${modal.data.id}`, formData);\n        toast.success(\"Modello aggiornato con successo\");\n      }\n      \n      setModal({ isOpen: false, type: null, data: null });\n      fetchData();\n    } catch (error) {\n      toast.error(`Errore: ${error.response?.data?.message || error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleDeleteModel = async (modelId) => {\n    if (window.confirm(\"Sei sicuro di voler eliminare questo modello?\")) {\n      setIsLoading(true);\n      try {\n        await api.delete(`/admin/ollama/models/${modelId}`);\n        toast.success(\"Modello eliminato con successo\");\n        fetchData();\n      } catch (error) {\n        toast.error(`Errore: ${error.response?.data?.message || error.message}`);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  // GESTIONE PROMPT OLLAMA\n  const handleOpenPromptModal = (type, prompt = null) => {\n    setFormData(prompt || { name: \"\", content: \"\", modelId: models.length > 0 ? models[0].id : \"\" });\n    setModal({ isOpen: true, type, data: prompt });\n  };\n\n  const handlePromptSubmit = async (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n    \n    try {\n      if (modal.type === \"addPrompt\") {\n        await api.post(\"/admin/ollama/prompts\", formData);\n        toast.success(\"Prompt aggiunto con successo\");\n      } else if (modal.type === \"editPrompt\") {\n        await api.put(`/admin/ollama/prompts/${modal.data.id}`, formData);\n        toast.success(\"Prompt aggiornato con successo\");\n      }\n      \n      setModal({ isOpen: false, type: null, data: null });\n      fetchData();\n    } catch (error) {\n      toast.error(`Errore: ${error.response?.data?.message || error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleDeletePrompt = async (promptId) => {\n    if (window.confirm(\"Sei sicuro di voler eliminare questo prompt?\")) {\n      setIsLoading(true);\n      try {\n        await api.delete(`/admin/ollama/prompts/${promptId}`);\n        toast.success(\"Prompt eliminato con successo\");\n        fetchData();\n      } catch (error) {\n        toast.error(`Errore: ${error.response?.data?.message || error.message}`);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  // GESTIONE CHAT DI GRUPPO\n  const handleOpenGroupModal = (type, group = null) => {\n    setFormData(group || { name: \"\", userIds: [] });\n    setModal({ isOpen: true, type, data: group });\n  };\n\n  const handleGroupSubmit = async (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n    \n    try {\n      if (modal.type === \"addGroup\") {\n        await api.post(\"/admin/groups\", formData);\n        toast.success(\"Gruppo creato con successo\");\n      } else if (modal.type === \"editGroup\") {\n        await api.put(`/admin/groups/${modal.data.id}`, formData);\n        toast.success(\"Gruppo aggiornato con successo\");\n      }\n      \n      setModal({ isOpen: false, type: null, data: null });\n      fetchData();\n    } catch (error) {\n      toast.error(`Errore: ${error.response?.data?.message || error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleDeleteGroup = async (groupId) => {\n    if (window.confirm(\"Sei sicuro di voler eliminare questo gruppo?\")) {\n      setIsLoading(true);\n      try {\n        await api.delete(`/admin/groups/${groupId}`);\n        toast.success(\"Gruppo eliminato con successo\");\n        fetchData();\n      } catch (error) {\n        toast.error(`Errore: ${error.response?.data?.message || error.message}`);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  // GESTIONE SSL\n  const handleSslSubmit = async (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n    \n    try {\n      await api.post(\"/admin/ssl\", sslCertificate);\n      toast.success(\"Certificato SSL aggiornato con successo\");\n    } catch (error) {\n      toast.error(`Errore: ${error.response?.data?.message || error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSslChange = (e) => {\n    const { name, value } = e.target;\n    setSslCertificate({ ...sslCertificate, [name]: value });\n  };\n\n  const handleMultiSelect = (e) => {\n    const options = e.target.options;\n    const values = [];\n    for (let i = 0; i < options.length; i++) {\n      if (options[i].selected) {\n        values.push(options[i].value);\n      }\n    }\n    setFormData({ ...formData, userIds: values });\n  };\n\n  const renderUserManagement = () => (\n    <>\n      <Title>Gestione Utenti</Title>\n      <Button \n        className=\"primary\" \n        onClick={() => handleOpenUserModal(\"addUser\")}\n      >\n        Aggiungi Utente\n      </Button>\n      \n      <Table>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Username</th>\n            <th>Email</th>\n            <th>Nome Completo</th>\n            <th>Ruolo</th>\n            <th>Azioni</th>\n          </tr>\n        </thead>\n        <tbody>\n          {users.map(user => (\n            <tr key={user.id}>\n              <td>{user.id}</td>\n              <td>{user.username}</td>\n              <td>{user.email}</td>\n              <td>{user.fullName}</td>\n              <td>{user.role}</td>\n              <td>\n                <Button \n                  className=\"secondary\" \n                  onClick={() => handleOpenUserModal(\"editUser\", user)}\n                >\n                  Modifica\n                </Button>\n                <Button \n                  className=\"secondary\" \n                  onClick={() => handleOpenUserModal(\"changePassword\", user)}\n                >\n                  Cambia Password\n                </Button>\n                <Button \n                  className=\"danger\" \n                  onClick={() => handleDeleteUser(user.id)}\n                >\n                  Elimina\n                </Button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n\n  const renderModelManagement = () => (\n    <>\n      <Title>Gestione Modelli Ollama</Title>\n      <Button \n        className=\"primary\" \n        onClick={() => handleOpenModelModal(\"addModel\")}\n      >\n        Aggiungi Modello\n      </Button>\n      \n      <Table>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Nome</th>\n            <th>URL</th>\n            <th>Azioni</th>\n          </tr>\n        </thead>\n        <tbody>\n          {models.map(model => (\n            <tr key={model.id}>\n              <td>{model.id}</td>\n              <td>{model.name}</td>\n              <td>{model.url}</td>\n              <td>\n                <Button \n                  className=\"secondary\" \n                  onClick={() => handleOpenModelModal(\"editModel\", model)}\n                >\n                  Modifica\n                </Button>\n                <Button \n                  className=\"danger\" \n                  onClick={() => handleDeleteModel(model.id)}\n                >\n                  Elimina\n                </Button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n\n  const renderPromptManagement = () => (\n    <>\n      <Title>Gestione Prompt Ollama</Title>\n      <Button \n        className=\"primary\" \n        onClick={() => handleOpenPromptModal(\"addPrompt\")}\n      >\n        Aggiungi Prompt\n      </Button>\n      \n      <Table>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Nome</th>\n            <th>Modello</th>\n            <th>Azioni</th>\n          </tr>\n        </thead>\n        <tbody>\n          {prompts.map(prompt => (\n            <tr key={prompt.id}>\n              <td>{prompt.id}</td>\n              <td>{prompt.name}</td>\n              <td>{models.find(m => m.id === prompt.modelId)?.name || \"N/A\"}</td>\n              <td>\n                <Button \n                  className=\"secondary\" \n                  onClick={() => handleOpenPromptModal(\"editPrompt\", prompt)}\n                >\n                  Modifica\n                </Button>\n                <Button \n                  className=\"danger\" \n                  onClick={() => handleDeletePrompt(prompt.id)}\n                >\n                  Elimina\n                </Button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n\n  const renderGroupManagement = () => (\n    <>\n      <Title>Gestione Chat di Gruppo</Title>\n      <Button \n        className=\"primary\" \n        onClick={() => handleOpenGroupModal(\"addGroup\")}\n      >\n        Crea Gruppo\n      </Button>\n      \n      <Table>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Nome</th>\n            <th>Partecipanti</th>\n            <th>Azioni</th>\n          </tr>\n        </thead>\n        <tbody>\n          {groups.map(group => (\n            <tr key={group.id}>\n              <td>{group.id}</td>\n              <td>{group.name}</td>\n              <td>{group.users?.length || 0} utenti</td>\n              <td>\n                <Button \n                  className=\"secondary\" \n                  onClick={() => handleOpenGroupModal(\"editGroup\", group)}\n                >\n                  Modifica\n                </Button>\n                <Button \n                  className=\"danger\" \n                  onClick={() => handleDeleteGroup(group.id)}\n                >\n                  Elimina\n                </Button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n\n  const renderSslManagement = () => (\n    <>\n      <Title>Gestione Certificato SSL</Title>\n      <Form onSubmit={handleSslSubmit}>\n        <FormGroup>\n          <Label htmlFor=\"cert\">Certificato (PEM)</Label>\n          <Textarea\n            id=\"cert\"\n            name=\"cert\"\n            value={sslCertificate.cert}\n            onChange={handleSslChange}\n            placeholder=\"-----BEGIN CERTIFICATE-----\"\n            required\n          />\n        </FormGroup>\n        \n        <FormGroup>\n          <Label htmlFor=\"key\">Chiave Privata (PEM)</Label>\n          <Textarea\n            id=\"key\"\n            name=\"key\"\n            value={sslCertificate.key}\n            onChange={handleSslChange}\n            placeholder=\"-----BEGIN PRIVATE KEY-----\"\n            required\n          />\n        </FormGroup>\n        \n        <Button className=\"primary\" type=\"submit\" disabled={isLoading}>\n          {isLoading ? \"Aggiornamento...\" : \"Aggiorna Certificato\"}\n        </Button>\n      </Form>\n    </>\n  );\n\n  const renderUserForm = () => (\n    <Form onSubmit={handleUserSubmit}>\n      <FormGroup>\n        <Label htmlFor=\"username\">Username</Label>\n        <Input\n          id=\"username\"\n          name=\"username\"\n          value={formData.username || \"\"}\n          onChange={handleInputChange}\n          required\n          disabled={modal.type === \"changePassword\"}\n        />\n      </FormGroup>\n      \n      {modal.type !== \"changePassword\" && (\n        <>\n          <FormGroup>\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              name=\"email\"\n              type=\"email\"\n              value={formData.email || \"\"}\n              onChange={handleInputChange}\n              required\n            />\n          </FormGroup>\n          \n          <FormGroup>\n            <Label htmlFor=\"fullName\">Nome Completo</Label>\n            <Input\n              id=\"fullName\"\n              name=\"fullName\"\n              value={formData.fullName || \"\"}\n              onChange={handleInputChange}\n            />\n          </FormGroup>\n          \n          <FormGroup>\n            <Label htmlFor=\"role\">Ruolo</Label>\n            <Select\n              id=\"role\"\n              name=\"role\"\n              value={formData.role || \"user\"}\n              onChange={handleInputChange}\n              required\n            >\n              <option value=\"user\">Utente</option>\n              <option value=\"admin\">Amministratore</option>\n            </Select>\n          </FormGroup>\n        </>\n      )}\n      \n      {modal.type === \"changePassword\" ? (\n        <FormGroup>\n          <Label htmlFor=\"newPassword\">Nuova Password</Label>\n          <Input\n            id=\"newPassword\"\n            name=\"newPassword\"\n            type=\"password\"\n            value={formData.newPassword || \"\"}\n            onChange={handleInputChange}\n            required\n          />\n        </FormGroup>\n      ) : (\n        <FormGroup>\n          <Label htmlFor=\"password\">Password</Label>\n          <Input\n            id=\"password\"\n            name=\"password\"\n            type=\"password\"\n            value={formData.password || \"\"}\n            onChange={handleInputChange}\n            required={modal.type === \"addUser\"}\n            placeholder={modal.type === \"editUser\" ? \"Lascia vuoto per non modificare\" : \"\"}\n          />\n        </FormGroup>\n      )}\n      \n      <Button className=\"primary\" type=\"submit\" disabled={isLoading}>\n        {isLoading ? \"Salvataggio...\" : \"Salva\"}\n      </Button>\n    </Form>\n  );\n\n  const renderModelForm = () => (\n    <Form onSubmit={handleModelSubmit}>\n      <FormGroup>\n        <Label htmlFor=\"name\">Nome Modello</Label>\n        <Input\n          id=\"name\"\n          name=\"name\"\n          value={formData.name || \"\"}\n          onChange={handleInputChange}\n          required\n        />\n      </FormGroup>\n      \n      <FormGroup>\n        <Label htmlFor=\"url\">URL</Label>\n        <Input\n          id=\"url\"\n          name=\"url\"\n          value={formData.url || \"\"}\n          onChange={handleInputChange}\n          required\n        />\n      </FormGroup>\n      \n      <Button className=\"primary\" type=\"submit\" disabled={isLoading}>\n        {isLoading ? \"Salvataggio...\" : \"Salva\"}\n      </Button>\n    </Form>\n  );\n\n  const renderPromptForm = () => (\n    <Form onSubmit={handlePromptSubmit}>\n      <FormGroup>\n        <Label htmlFor=\"name\">Nome Prompt</Label>\n        <Input\n          id=\"name\"\n          name=\"name\"\n          value={formData.name || \"\"}\n          onChange={handleInputChange}\n          required\n        />\n      </FormGroup>\n      \n      <FormGroup>\n        <Label htmlFor=\"modelId\">Modello</Label>\n        <Select\n          id=\"modelId\"\n          name=\"modelId\"\n          value={formData.modelId || \"\"}\n          onChange={handleInputChange}\n          required\n        >\n          <option value=\"\">Seleziona un modello</option>\n          {models.map(model => (\n            <option key={model.id} value={model.id}>\n              {model.name}\n            </option>\n          ))}\n        </Select>\n      </FormGroup>\n      \n      <FormGroup>\n        <Label htmlFor=\"content\">Contenuto del Prompt</Label>\n        <Textarea\n          id=\"content\"\n          name=\"content\"\n          value={formData.content || \"\"}\n          onChange={handleInputChange}\n          required\n        />\n      </FormGroup>\n      \n      <Button className=\"primary\" type=\"submit\" disabled={isLoading}>\n        {isLoading ? \"Salvataggio...\" : \"Salva\"}\n      </Button>\n    </Form>\n  );\n\n  const renderGroupForm = () => (\n    <Form onSubmit={handleGroupSubmit}>\n      <FormGroup>\n        <Label htmlFor=\"name\">Nome Gruppo</Label>\n        <Input\n          id=\"name\"\n          name=\"name\"\n          value={formData.name || \"\"}\n          onChange={handleInputChange}\n          required\n        />\n      </FormGroup>\n      \n      <FormGroup>\n        <Label htmlFor=\"userIds\">Partecipanti</Label>\n        <Select\n          id=\"userIds\"\n          name=\"userIds\"\n          multiple\n          value={formData.userIds || []}\n          onChange={handleMultiSelect}\n          required\n          style={{ height: \"200px\" }}\n        >\n          {users.map(user => (\n            <option key={user.id} value={user.id}>\n              {user.username} ({user.fullName || user.email})\n            </option>\n          ))}\n        </Select>\n      </FormGroup>\n      \n      <Button className=\"primary\" type=\"submit\" disabled={isLoading}>\n        {isLoading ? \"Salvataggio...\" : \"Salva\"}\n      </Button>\n    </Form>\n  );\n\n  const renderModalContent = () => {\n    const titles = {\n      addUser: \"Aggiungi Nuovo Utente\",\n      editUser: \"Modifica Utente\",\n      changePassword: \"Cambia Password\",\n      addModel: \"Aggiungi Nuovo Modello\",\n      editModel: \"Modifica Modello\",\n      addPrompt: \"Aggiungi Nuovo Prompt\",\n      editPrompt: \"Modifica Prompt\",\n      addGroup: \"Crea Nuovo Gruppo\",\n      editGroup: \"Modifica Gruppo\"\n    };\n    \n    return (\n      <ModalContent>\n        <ModalHeader>\n          <h3>{titles[modal.type]}</h3>\n          <CloseButton onClick={() => setModal({ isOpen: false, type: null, data: null })}>×</CloseButton>\n        </ModalHeader>\n        \n        {modal.type?.includes(\"User\") && renderUserForm()}\n        {modal.type?.includes(\"Model\") && renderModelForm()}\n        {modal.type?.includes(\"Prompt\") && renderPromptForm()}\n        {modal.type?.includes(\"Group\") && renderGroupForm()}\n      </ModalContent>\n    );\n  };\n\n  return (\n    <AdminContainer>\n      <Header>\n        <h1>Pannello di Amministrazione</h1>\n      </Header>\n      \n      <MainContent>\n        <Sidebar>\n          <SidebarItem \n            className={activeSection === \"users\" ? \"active\" : \"\"}\n            onClick={() => setActiveSection(\"users\")}\n          >\n            Gestione Utenti\n          </SidebarItem>\n          <SidebarItem \n            className={activeSection === \"models\" ? \"active\" : \"\"}\n            onClick={() => setActiveSection(\"models\")}\n          >\n            Modelli Ollama\n          </SidebarItem>\n          <SidebarItem \n            className={activeSection === \"prompts\" ? \"active\" : \"\"}\n            onClick={() => setActiveSection(\"prompts\")}\n          >\n            Prompt Ollama\n          </SidebarItem>\n          <SidebarItem \n            className={activeSection === \"groups\" ? \"active\" : \"\"}\n            onClick={() => setActiveSection(\"groups\")}\n          >\n            Chat di Gruppo\n          </SidebarItem>\n          <SidebarItem \n            className={activeSection === \"ssl\" ? \"active\" : \"\"}\n            onClick={() => setActiveSection(\"ssl\")}\n          >\n            Certificato SSL\n          </SidebarItem>\n        </Sidebar>\n        \n        <ContentArea>\n          {activeSection === \"users\" && renderUserManagement()}\n          {activeSection === \"models\" && renderModelManagement()}\n          {activeSection === \"prompts\" && renderPromptManagement()}\n          {activeSection === \"groups\" && renderGroupManagement()}\n          {activeSection === \"ssl\" && renderSslManagement()}\n        </ContentArea>\n      </MainContent>\n      \n      {modal.isOpen && (\n        <Modal>\n          {renderModalContent()}\n        </Modal>\n      )}\n    </AdminContainer>\n  );\n};\n\nexport default AdminPanel;\n"],"names":["AdminContainer","styled","div","Header","header","MainContent","main","Sidebar","aside","SidebarItem","ContentArea","Title","h2","Table","table","Button","button","Form","form","FormGroup","Label","label","Input","input","Select","select","Textarea","textarea","Modal","ModalContent","ModalHeader","CloseButton","AdminPanel","activeSection","setActiveSection","useState","users","setUsers","models","setModels","prompts","setPrompts","groups","setGroups","modal","setModal","isOpen","type","data","sslCertificate","setSslCertificate","cert","key","formData","setFormData","isLoading","setIsLoading","useEffect","fetchData","async","userResponse","api","get","modelsResponse","promptsResponse","groupsResponse","sslResponse","error","_error$response","_error$response$data","toast","response","message","handleInputChange","e","name","value","target","handleOpenUserModal","user","arguments","length","undefined","username","email","password","fullName","role","handleUserSubmit","preventDefault","post","success","put","id","newPassword","_error$response2","_error$response2$data","handleOpenModelModal","model","url","handleModelSubmit","_error$response4","_error$response4$data","handleOpenPromptModal","prompt","content","modelId","handlePromptSubmit","_error$response6","_error$response6$data","handleOpenGroupModal","group","userIds","handleGroupSubmit","_error$response8","_error$response8$data","handleSslSubmit","_error$response10","_error$response10$dat","handleSslChange","handleMultiSelect","options","values","i","selected","push","_jsxs","children","_jsx","className","onClick","_Fragment","map","window","confirm","delete","userId","_error$response3","_error$response3$data","handleDeleteUser","_error$response5","_error$response5$data","handleDeleteModel","_models$find","find","m","promptId","_error$response7","_error$response7$data","handleDeletePrompt","_group$users","groupId","_error$response9","_error$response9$data","handleDeleteGroup","onSubmit","htmlFor","onChange","placeholder","required","disabled","renderModalContent","_modal$type","_modal$type2","_modal$type3","_modal$type4","addUser","editUser","changePassword","addModel","editModel","addPrompt","editPrompt","addGroup","editGroup","includes","multiple","style","height"],"sourceRoot":""}